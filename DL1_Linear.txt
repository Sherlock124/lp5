import pandas as pd
import seaborn as sns
df = pd.read_csv("./1_boston_housing(1).csv")

df

df.info()

df.describe()

df.dtypes

df.isnull().sum()

import matplotlib.pyplot as plt
plt.figure(figsize=(8,6))

sns.set(rc = {'figure.figsize':(11.7,8.27)})

corr_matrix = df.corr().round(2)

sns.heatmap(data = corr_matrix,annot = True)

sns.distplot(df['MEDV'],bins = 30)
plt.show()

from sklearn.model_selection import train_test_split

X = df.loc[:, df.columns != 'MEDV']
y = df.loc[:, df.columns == 'MEDV']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=123)

from sklearn.preprocessing import MinMaxScaler
mms = MinMaxScaler()
mms.fit(X_train)
X_train = mms.transform(X_train)
X_test = mms.transform(X_test)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

model = Sequential()

model.add(Dense(512, input_shape=(13, ), activation='relu', name='input'))
model.add(Dense(256,activation='relu', name='dense_1'))
model.add(Dense(128,activation='relu', name='dense_2'))
model.add(Dense(64, activation='relu', name='dense_3'))
model.add(Dense(1, activation='linear', name='dense_output'))

model.compile(optimizer='adam', loss='mse', metrics=['mae'])
model.summary()

history = model.fit(X_train, y_train, epochs=100, validation_split=0.05, verbose = 1)

mse_nn, mae_nn = model.evaluate(X_test, y_test)

print('Mean squared error on test data: ', mse_nn)
print('Mean absolute error on test data: ', mae_nn)

